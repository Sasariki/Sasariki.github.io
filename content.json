{"posts":[{"title":"为你的网站加上一个Ai","text":"我昨天在逛土土网站的时候，看到友链有一个网站里面有Ai的文章概括。我觉得这个很酷，正好我自己正在训练大模型，想着可不可以用我的网站测试一下~ Ai概括来源（NaoKuo） 我于是在bing上面找相关的技术文章，找到了这个开源项目：github 分享一下我是如何部署的，在官方找到源码 123456&lt;link rel=&quot;stylesheet&quot; href=&quot;https://ai.tianli0.top/static/public/tianli_gpt.min.css&quot;&gt;&lt;script&gt;let tianliGPT_postSelector = '#post #article-container';let tianliGPT_key = '5Q5mpqRK5DkwT1X9Gi5e';&lt;/script&gt;&lt;script src=&quot;https://ai.tianli0.top/static/public/tianli_gpt.min.js&quot;&gt;&lt;/script&gt; 把这段代码复制到你的网站文章界面，就那WordPress为例。 再合适的地方粘贴，然后重要的一步来了，一定要修改tianliGPT_postSelector和tianliGPT_key。 tianliGPT_postSelector 这个参数是填写你的博客文章所在的元素属性的选择器，在生成提交的文本时，只会将这个选择器对应的元素内的文本进行提交，并且在这个选择器对应的元素上放插入AI摘要。 例如我的： 就是在#main下的div的article中的头部插入，具体的可以在 这里 看到 修改好保存之后就要填写tianliGPT_key**，这个在 这里 看到，就填写到tianliGPT_key那一栏 也可以像我一样插入自己的模型，具体可以参考官方 效果概括：","link":"/2024/09/19/%E4%B8%BA%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%8A%E4%B8%80%E4%B8%AAAi/"},{"title":"响应式Web设计的最佳实践","text":"随着移动设备的普及，用户通过各种不同尺寸的屏幕访问网站，从桌面电脑到智能手机，设备的多样化使得响应式设计变得尤为重要。在本文中，我们将探讨如何通过响应式设计优化用户体验，并分享一些最佳实践，帮助你更好地实现跨设备的统一设计。 什么是响应式Web设计？响应式Web设计是一种基于CSS的技术，能够根据设备的屏幕尺寸动态调整页面布局。无论用户是使用大屏的桌面设备，还是小尺寸的手机，页面都会自动调整以适应不同的分辨率，提升用户的浏览体验。 响应式设计的三大核心在开发响应式网站时，有三大核心原则需要牢记： 弹性布局 (Fluid Grid Layout)使用百分比而不是固定像素定义元素宽度。这样，页面的布局可以根据屏幕尺寸自动扩展或缩小。 示例代码： 1234567891011121314.container { width: 100%; max-width: 1200px; margin: 0 auto;}.column { width: 50%; float: left;}@media (max-width: 768px) { .column { width: 100%; }} 弹性图片与媒体 (Flexible Media)图片、视频等媒体内容也应该具备自适应能力，确保不会超出容器或在小屏幕上显得失真。 示例代码： 1234img { max-width: 100%; height: auto;} 媒体查询 (Media Queries)媒体查询是一项CSS技术，允许我们根据设备特性（如宽度、高度、分辨率）来应用特定的样式。它是响应式设计的关键。 示例代码： 12345678910@media (max-width: 600px) { body { font-size: 14px; }}@media (min-width: 1200px) { body { font-size: 18px; }} 响应式设计的最佳实践 移动优先设计 (Mobile First Design)移动设备用户已占据主导地位，因此从移动设备设计出发，逐步扩展到桌面设备，是一个值得推荐的开发模式。这样可以确保移动设备的体验得到最优优化。 简洁的导航设计在响应式设计中，导航栏是一个挑战。对于移动设备，我们通常会使用汉堡菜单，或通过媒体查询隐藏复杂的导航元素。 示例代码： 123456789.nav { display: flex; flex-direction: row;}@media (max-width: 768px) { .nav { display: none; }} 测试与优化在开发过程中，务必在各种设备上进行测试，确保不同设备的用户体验一致。你可以使用浏览器的开发者工具来模拟不同设备，或者使用在线工具，如BrowserStack，来进行更全面的测试。 性能优化响应式设计的页面通常需要加载多种资源（如不同尺寸的图片），因此优化加载速度非常重要。你可以使用技术如Lazy Loading或图片压缩来提升页面性能。 示例代码： 1&lt;img src=&quot;small-image.jpg&quot; data-src=&quot;large-image.jpg&quot; alt=&quot;Sample Image&quot; loading=&quot;lazy&quot;&gt; 结论响应式Web设计不仅仅是技术上的调整，更是对用户体验的优化。通过合理使用弹性布局、媒体查询和性能优化手段，能够确保网站在不同设备上都能有一致且高质量的呈现。希望本文提供的最佳实践，能够帮助你在设计和开发过程中，轻松应对不同设备的挑战。","link":"/2024/09/21/%E5%93%8D%E5%BA%94%E5%BC%8FWeb%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"title":"如何使用CDN加速网站","text":"网站的加载速度直接影响==用户体验和SEO排名==。对于WordPress博客，使用**内容分发网络（CDN）**可以显著提升加载速度，特别是在有大量静态资源==（如图片、CSS、JavaScript等）==的情况下。CDN可以将这些静态资源分发到多个服务器节点，从而提高网站的性能。 本文将介绍如何使用国内几大主流CDN服务商，如七牛云、阿里云、腾讯云、又拍云等，来加速WordPress网站，并包括关于**==全站加速==**的内容。 一、选择合适的CDN服务商目前，市面上有多种CDN服务商可以选择，以下是几个常用的： 七牛云：提供高效、稳定的CDN加速服务，特别适合中小型网站，按流量计费。 阿里云：中国最大的云服务提供商，CDN服务强大且覆盖广，支持弹性带宽。 腾讯云：凭借腾讯的基础设施，腾讯云的CDN在国内有极高的访问速度和稳定性。 又拍云：以按需计费为特点，支持多种场景应用，适合各类企业级网站。 span 服务商的对比 服务商 优势 适用场景 定价模式 七牛云 简单易用，支持图像处理，适合中小企业 中小型博客和网站 按流量付费 阿里云 覆盖范围广，支持复杂需求，企业级服务 企业网站、大型电商平台 按流量或带宽付费 腾讯云 网络覆盖强，适合有高并发需求的网站 高流量网站 按带宽或流量付费 又拍云 操作简单，弹性计费，支持多种定制功能 博客、个人网站 按流量或存储付费 二、配置WordPress与CDN集成接下来将介绍如何将这些CDN服务与WordPress集成，使博客的静态资源通过CDN进行加速。 1. 七牛云CDN配置步骤 1：注册七牛云并创建空间 登录七牛云官网，注册并完成实名认证。 创建一个存储空间，选择**==公开空间==**，并记录下空间域名。 步骤 2：安装七牛云插件 在WordPress后台，搜索并安装“**==WP Qiniu==**”插件。 插件安装后，进入插件设置页面，填入七牛云的==Access Key、Secret Key==和Bucket信息。 设置文件保存路径，并将域名改为你在七牛云创建的空间域名。 步骤 3：同步静态资源插件会自动将WordPress的静态资源（图片、CSS、JS）上传到七牛云存储空间。同步完成后，你的站点将通过七牛云的CDN节点分发这些静态资源。 2. 阿里云CDN配置步骤 1：注册阿里云并创建CDN加速 注册并登录阿里云，进入CDN服务。 创建加速域名，将你的WordPress博客域名添加到CDN中，选择“**==全站加速==”或“==静态资源加速==**”。 添加完毕后，阿里云会提供一个加速域名。 步骤 2：安装缓存插件使用==W3 Total Cache或WP Super Cache==插件来集成阿里云CDN。 在WordPress后台安装**==W3 Total Cache==**插件。 启动插件后，进入“CDN”设置页面，启用CDN功能并将阿里云提供的加速域名填入“==CDN Hostname==”字段。 步骤 3：测试并启用确保所有的静态资源通过CDN加载，测试网站加载速度是否有明显提升。 3. 腾讯云CDN配置步骤 1：注册腾讯云并开通CDN服务 在腾讯云官网注册并登录。 进入CDN控制台，添加你的域名，并选择“**==静态内容加速==**”模式。 完成域名验证后，腾讯云会为你提供一个加速域名。 步骤 2：使用插件集成腾讯云CDN 在WordPress后台安装**==CDN Enabler==插件，或使用==W3 Total Cache==**插件。 启用插件后，在设置页面添加腾讯云提供的CDN加速域名。 保存设置，清理缓存后，检查静态资源是否通过CDN加载。 4. 又拍云CDN配置步骤 1：注册并创建加速服务 注册并登录又拍云官网。 在控制台中创建一个加速服务，选择适合的网站类型（如图片加速或全站加速）。 系统将生成一个加速域名供你使用。 步骤 2：安装并配置插件 在WordPress后台搜索并安装“**==UPYUN CDN for WordPress==**”插件。 在插件设置中输入又拍云提供的加速域名。 根据需求设置同步文件的类型（如图片、CSS、JS等）。 步骤 3：测试与监控设置完成后，你可以通过又拍云的控制台查看CDN的使用情况，确保静态资源的访问速度和加载性能得到了显著提升。 三、什么是全站加速？ **==全站加速==**是指将网站的静态资源（如图片、CSS、JS）和动态内容（如HTML页面、数据库查询响应）都通过CDN进行加速。与传统的仅加速静态内容的CDN相比，全站加速可以优化整个网站的访问速度，尤其是对于有大量动态请求的站点，比如带有用户登录、购物车、搜索功能的电商网站。 全站加速的好处 优化动态内容的加载：对于包含动态内容的网站（如用户交互页面、在线商店、社区平台等），全站加速不仅缓存静态文件，还优化动态数据的传输，使页面响应更快。 提升用户体验：无论用户身处何地，CDN的服务器都能将请求自动路由到最优节点，即使涉及动态数据的请求，也能实现快速响应。 减少服务器负载：通过将动态内容的负载分布在CDN节点上，主服务器不必处理所有请求，极大减少服务器压力。 适合全站加速的网站类型全站加速特别适合以下几类网站： 电商平台：电商网站的页面涉及大量动态内容，如产品展示、用户登录、购物车等，全站加速可以减少动态请求的延迟。 社区和社交平台：包含用户生成内容的社交网站需要频繁更新和处理数据，全站加速可减少数据库查询时间。 大型博客或新闻网站：这些网站不仅有静态内容展示，还可能包括用户评论、搜索功能等动态部分。 如何配置全站加速大多数国内主流的CDN服务商（如阿里云、腾讯云、七牛云）都提供全站加速功能。配置步骤如下： 启用全站加速服务：在CDN控制台中选择“全站加速”模式，将你的网站域名添加到全站加速服务中。 域名解析：将你的网站域名的DNS记录指向CDN提供的加速域名，确保所有用户请求都经过CDN节点。 缓存策略配置：根据网站的动态与静态内容设置不同的缓存策略，静态内容（如图片、CSS、JS）可设置为长时间缓存，而动态内容（如用户登录页面、搜索结果）则设置为较短的缓存时间，甚至不缓存。 测试并监控：确保全站加速功能正常运行后，通过监控工具观察网站的访问速度和CDN命中率，及时优化缓存策略。 阿里云DCDN 全站加速与普通CDN的区别普通的CDN主要用于加速静态资源的传输，如图片、CSS、JS等文件，而全站加速则在此基础上，进一步优化了动态内容的加载和处理。主要区别如下： 功能 普通CDN 全站加速 加速对象 静态资源（如图片、CSS、JS） 静态资源 + 动态内容 缓存 主要缓存静态资源 动态内容不缓存，但优化路由和传输 智能路由 无 有（根据网络状况选择最优路径） 动态请求加速 无 有（通过优化传输协议、智能路由等） 边缘计算 无 有（部分CDN节点支持边缘计算） 四、优化CDN的设置在完成CDN的基本配置后，还可以通过以下方法进一步优化站点的加载速度和性能： 1. 启用GZIP压缩大多数CDN服务商都支持**==GZIP压缩==**，通过压缩==HTML、CSS、JavaScript==等文件来减少数据传输量。你可以在CDN服务商的控制面板中启用GZIP功能，也可以通过WordPress插件启用压缩功能。 2. 配置缓存策略为不同类型的静态资源设置合理的缓存策略。例如，图片、字体等资源通常不会频繁更改，因此可以设置较长的缓存时间；而CSS、JS等文件则可以根据更新频率设置较短的缓存周期。这样可以减少用户每次访问时重复加载资源的时间。 3. 启用HTTP/2协议许多CDN服务商支持*HTTP/2协议，它允许浏览器并行加载多个文件，从而减少请求时间。确保你的CDN服务启用了HTTP/2，以进一步提高页面加载速度。 4. 使用HTTPS加密如今，安全性是网站的重要因素。大多数CDN服务商（如阿里云、腾讯云、七牛云等）都提供免费或付费的SSL证书。你可以通过CDN服务启用**==HTTPS加密==**，确保数据传输的安全性，提升网站在搜索引擎中的排名。 5. 监控和调整定期监控CDN的使用情况，查看网站的流量、加载速度、缓存命中率等指标。根据这些数据进行调整，例如优化缓存策略或升级CDN套餐，以适应网站的实际流量需求。 五、总结通过正确配置和使用CDN服务，WordPress博客的加载速度可以得到显著提升，从而改善用户体验并提高搜索引擎的排名。无论你选择七牛云、阿里云、腾讯云还是又拍云，关键在于选择适合自己网站需求的CDN服务商，并根据网站的特性优化配置。 全站加速对于涉及动态内容的站点尤其重要，它不仅提升静态资源加载速度，还能显著优化动态","link":"/2024/09/18/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99/"},{"title":"如何通过宝塔面板设置反向代理","text":"有的时候，我们不想更换域名。这个时候就可以用到这个反向代理，如果你又安装了宝塔面板，那完成就更简单了。比如我们需要设置这个域名的反向代理，我们可以打开域名的详细设置 打开点击 点击重定向，添加 按照图上这样设置即可，这样打开就是反向代理的网站了","link":"/2024/09/20/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E8%AE%BE%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"},{"title":"掌握CSS变量：技巧与最佳实践","text":"CSS变量（Custom Properties）是现代Web开发中强大且灵活的工具。它们能够提升样式的可维护性、复用性，并极大地减少代码冗余。本文将详细介绍如何有效地使用CSS变量，并提供一些实际开发中的最佳实践。 什么是CSS变量？CSS变量是一种可以在整个样式表中复用的值，定义时使用--前缀，并通过var()函数来调用。它们的出现为我们提供了一种灵活、高效的方式来管理复杂的样式。 示例： 1234567891011:root { --main-bg-color: #f4f4f4; --primary-color: #3498db; --font-size: 16px;}body { background-color: var(--main-bg-color); color: var(--primary-color); font-size: var(--font-size);} 在上述代码中，我们在:root伪类中定义了一些全局CSS变量，并在具体的样式中使用var()函数来引用它们。通过这种方式，我们可以在整个项目中轻松维护这些值。 为什么选择CSS变量？CSS变量相比传统的预处理器变量（如Sass或Less）有几个显著优势： 实时性：CSS变量是动态的，允许在运行时通过JavaScript修改。 层级作用域：变量可以在特定范围内定义和使用，支持局部变量的创建。 简化维护：通过减少重复的样式定义，提高了代码的可读性与复用性。 CSS变量的使用技巧 统一管理配色方案 使用CSS变量可以轻松管理站点的配色方案，只需更改变量的定义，整个站点的颜色风格就可以统一更新。 1234567891011121314:root { --primary-color: #3498db; --secondary-color: #2ecc71; --text-color: #333;}header { background-color: var(--primary-color);}footer { background-color: var(--secondary-color); color: var(--text-color);} 在需要更新配色时，只需修改:root中变量的值，整个网站的颜色都会随之变化。 主题切换 CSS变量支持动态修改，因此我们可以使用它们来实现网站的主题切换功能，比如从浅色模式切换到深色模式。 1234567891011121314:root { --background-color: #ffffff; --text-color: #333333;}[data-mode=&quot;dark&quot;] { --background-color: #000000; --text-color: #f1f1f1;}body { background-color: var(--background-color); color: var(--text-color);} 通过切换data-mode属性的值，可以轻松实现浅色和深色模式的切换。这种方式不仅灵活，还能减少冗余的样式定义。 响应式设计中的变量使用 CSS变量还能在响应式设计中发挥作用，帮助我们根据不同的设备屏幕调整变量值。例如，在不同设备上调整字体大小或间距。 12345678910111213:root { --font-size: 16px;}@media (max-width: 600px) { :root { --font-size: 14px; }}body { font-size: var(--font-size);} 在上面的代码中，我们在移动 设备上动态调整了字体大小，只需定义一次变量，其他引用该变量的地方都会自动响应改变。 增强组件的灵活性 CSS变量也可以用于提高组件的可定制性。例如，在创建一个按钮组件时，通过CSS变量，我们可以允许开发者自定义按钮的颜色、大小等属性，而不需要修改原始的CSS代码。 12345.button { background-color: var(--btn-bg-color, #3498db); color: var(--btn-text-color, #fff); padding: var(--btn-padding, 10px 20px);} 在使用按钮组件时，只需定义或覆盖变量即可实现不同风格的按钮： 1&lt;button class=&quot;button&quot; style=&quot;--btn-bg-color: #e74c3c; --btn-padding: 12px 24px;&quot;&gt;点击我&lt;/button&gt; CSS变量的最佳实践 统一命名规范 在使用CSS变量时，建议遵循一致的命名规范，以确保代码的可读性。例如，可以使用--component-property的形式，清晰地表示每个变量的作用域和用途。 1234:root { --header-height: 60px; --header-bg-color: #3498db;} 为变量提供默认值 使用var()时可以设置一个默认值，防止变量未定义时造成样式错误。 123.button { background-color: var(--btn-bg-color, #333); /* 若未定义 --btn-bg-color，则使用默认值 #333 */} 避免过度依赖变量 虽然CSS变量为开发提供了极大的便利，但过度使用或层层嵌套也会使代码难以理解。建议在合理的地方使用变量，而非将所有样式都转化为变量。 结论CSS变量为我们带来了前所未有的灵活性和可扩展性，无论是全局样式管理还是动态主题切换，它们都能极大简化开发流程。通过合理使用CSS变量，既可以减少重复代码，又能提升项目的维护性与可扩展性。 掌握并使用这些技巧，将帮助你在Web开发中更高效地管理样式。希望本文的技巧和最佳实践能帮助你充分发挥CSS变量的潜力！","link":"/2024/09/21/%E6%8E%8C%E6%8F%A1CSS%E5%8F%98%E9%87%8F%EF%BC%9A%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"title":"宝塔+docker搭建umami统计部署","text":"配置教程我是先从GitHub上先把umami的压缩包放到服务器上再解压，使用的最新版本，想着用MySQL+Docker来部署，部署完后发现是1.33的版本，无法获取token和统计api，原因在于使用了低版本的MySQL(5.7.44)，后面又换成Postgresql，发现Pgsql数据库是Docker打包好了的，不用下载，我还傻乎乎的去下载了一个，然后还导致端口冲突Umami 基于Node.js 开发，采用 MySQL 或 Postgresql 数据库存储数据 Node.js 18.17 或更高的版本 服务器上安装了 MySQL 8.0 或以上 或 Postgresql 12.14 或以上 下载完成后解压到服务器，先要设置一下Docker加速URL，不然你可以等一天 12345678{ &quot;registry-mirrors&quot;: [ &quot;https://docker.m.daocloud.io&quot;, &quot;https://dockerproxy.com&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot;, &quot;https://docker.nju.edu.cn&quot; ]} &lt;span class=&quot;pun&quot;&gt;请注意删除注释以及修改相关配置&lt;/span&gt;，修改在umami文件夹下的&lt;span class=&quot;pln&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;composer&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yml&lt;/span&gt;文件。 12345678910111213141516171819202122232425262728293031323334353637383940---version: '3'services: umami: //使用南京大的ghcr镜像:ghcr.nju.edu.cn image: ghcr.nju.edu.cn/umami-software/umami:postgresql-latest ports: //默认运行的端口，可以跟改为别的闲置端口 - &quot;3000:3000&quot; environment: //Umami数据库设置，可修改，但也请修改 PgSQL 镜像中的配置信息 DATABASE_URL: postgresql://umami:umami@db:5432/umami DATABASE_TYPE: postgresql APP_SECRET: replace-me-with-a-random-string depends_on: db: condition: service_healthy restart: always healthcheck: test: [&quot;CMD-SHELL&quot;, &quot;curl http://localhost:3000/api/heartbeat&quot;] interval: 5s timeout: 5s retries: 5 db: image: postgres:15-alpine ports: - &quot;5432:5432&quot; environment: POSTGRES_DB: umami POSTGRES_USER: umami POSTGRES_PASSWORD: umami volumes: //PgSQL数据库镜像数据存储的路径，请酌情修改 - /www/wwwroot/umami/PgSQL:/var/lib/postgresql/data restart: always healthcheck: test: [&quot;CMD-SHELL&quot;, &quot;pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}&quot;] interval: 5s timeout: 5s retries: 5 在docker-composer.yml文件目录下，运行下列命令： 1docker-compose up -d 容器构建完成可以访问&lt;span class=&quot;pln&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;//ip:3000&lt;/span&gt; 进行查看使用 添加反向代理创建一个&lt;span class=&quot;pln&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;静态站点&lt;/span&gt;，&lt;span class=&quot;pun&quot;&gt;点击设置&lt;/span&gt; → &lt;span class=&quot;pun&quot;&gt;反向代理&lt;/span&gt; → &lt;span class=&quot;pun&quot;&gt;添加反向代理&lt;/span&gt; 目标URL：&lt;span class=&quot;pln&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;//127.0.0.1:你的端口&lt;/span&gt; ， 发送域名：&lt;span class=&quot;pln&quot;&gt;$host&lt;/span&gt; ，没改端口默认就是 &lt;span class=&quot;pln&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;//127.0.0.1:3000&lt;/span&gt;改完之后就可以通过你的域名来访问了 设置中文默认用户名：&lt;span class=&quot;pln&quot;&gt;admin&lt;/span&gt;，密码：&lt;span class=&quot;pln&quot;&gt;umami&lt;/span&gt; 进去之后先改为中文 找到语言，改为中文 添加网站找到&lt;span class=&quot;pun&quot;&gt;设置&lt;/span&gt; → &lt;span class=&quot;pun&quot;&gt;添加网站&lt;/span&gt; 选择&lt;span class=&quot;pun&quot;&gt;编辑&lt;/span&gt;中的&lt;span class=&quot;pun&quot;&gt;跟踪代码&lt;/span&gt;，将代码插入到网站的每一页即可 转载来自 别亦难","link":"/2024/09/20/%E5%AE%9D%E5%A1%94+docker%E6%90%AD%E5%BB%BAumami%E7%BB%9F%E8%AE%A1%E9%83%A8%E7%BD%B2/"},{"title":"搭建Hexo静态博客并部署到服务器","text":"记录Hexo博客搭建的基本过程，包括备份到GitHub以及部署到服务器。 准备工作 安装git到git官网下载安装包，可根据自己的系统(Mac/Linux/Win)进行选择，下载完进行安装即可。 安装node.js同样到node.js官网下载对应的安装包，一直下一步安装。 测试安装结果 123456git --version//查看git版本node --version//查看node.js版本npm --version//查看npm版本 能够看到版本号，则说明安装成功 安装Hexo 使用npm命令安装Hexo 12npm install -g hexo-cli//使用-g命令进行全局安装 安装过程视网络情况而定，如果安装速度过慢，可以使用==cnpm==进行安装，安装完毕后如下，可能会出现一些警告信息，可以忽略 查看hexo是否安装成功 12hexo -v//查看hexo版本号 运行上述代码后，出现错误提示**==hexo : 无法加载文件 ……\\npm\\hexo.ps1，因为在此系统上禁止运行脚本==** 解决方案： 12/在Powershell中运行如下代码set-ExecutionPolicy RemoteSigned 执行完毕后，就可以看到hexo的版本了，说明hexo已经安装成功 使用Hexo在本地部署博客 首先新建一个空白的文件夹，并使用hexo进行初始化 123456mkdir blog//创建一个文件夹cd .\\blog\\//进入blog文件夹hexo init//进行初始化 注意：**==使用hexo进行初始化时，必须保证文件夹是空的，否则会报错==** 在同样的文件夹下，运行命令生成文件，并开启hexo服务 123456hexo clean//清理原来生成的配置文件(如果有的话)hexo g//生成配置文件hexo s//启动本地的hexo服务 启动服务后如下，这个界面是因为我更换了icarus的主题，没有更换主题的界面和下图不同 注意：生成和推送博客上，可能会提示**==Package cheerio is not installed==**，只需要执行&lt;span class=&quot;pln&quot;&gt;npm install cherrio&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;S&lt;/span&gt;即可 运行hexo后，根据提示进入&lt;span class=&quot;pln&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;4000&lt;/span&gt;，就可以看到生成的博客了 将博客备份到GitHub 创建GitHub仓库作为备份，我们可以在GitHub创建一个仓库来进行存放。首先进入Github，点击右上角的账户→Your repositories→New，创建一个新的仓库，类型根据自己需求选择public或者private 配置秘钥 123456git config --global user.name &quot;Name&quot;//Name为Github用户名git config --global user.email &quot;Email@domain.com&quot;//Email为GitHub邮箱ssh-keygen -t rsa -C &quot;Email@domain.com&quot;//生成秘钥 秘钥生成后，到&lt;span class=&quot;pln&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;\\User\\Username\\\\&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ssh&lt;/span&gt;下，打开&lt;span class=&quot;pln&quot;&gt;id_rsa&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;pub&lt;/span&gt;文件，复制秘钥 打开GitHub，进入右上角用户→Settings→SSH and GPG keys→New ssh key，新建一个SSH秘钥，将刚才复制的内容粘贴进去，并确认 确认完毕后，运行&lt;span class=&quot;pln&quot;&gt;ssh&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;T git@github&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;com&lt;/span&gt;测试秘钥是否可用，连接成功后如下 提交到GitHub 要提交内容到GitHub，可以使用&lt;span class=&quot;pln&quot;&gt;hexo&lt;/span&gt;的deploy功能 12npm install hexo-deploy-git --save//安装hexo-deplyo-git插件 安装完毕后，进入博客目录，编辑&lt;span class=&quot;pln&quot;&gt;_config&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yml&lt;/span&gt;文件，在末尾的deploy功能中，填上GitHub仓库的地址即可 接下来，运行&lt;span class=&quot;pln&quot;&gt;hexo deploy&lt;/span&gt;，即可将博客上传到GitHub仓库中 将博客部署到服务器 配置服务器git账户安装git并创建git账户 123456789//安装gitsudo apt-get updatesudo apt-get install git//配置单独的git用户用于同步博客adduser git //添加用户，并根据提示设置密码//给git账户添加权限vim /etc/sudoers//在root用户下方添加git ALL=(ALL) ALL 切换到git用户，初始化git仓库 12345678//切换目录cd /home/git//创建git仓库文件夹mkdir blog.git//进入仓库目录cd blog.git//初始化为空仓库git init --bare 配置SSH秘钥 1234567su gitmkdir ~/.ssh//将Windows下生成的秘钥拷贝过来vim ~/.ssh/authorized_keys//修改文件权限chmod 600 ~/.ssh/authorized_keyschmod 700 ~/.ssh 配置完毕后，回到Windows输入&lt;span class=&quot;pln&quot;&gt;ssh&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;v git@Server&lt;/span&gt;测试秘钥是否可用 安装Nginx 1sudo apt-get install nginx 安装完毕后，执行&lt;span class=&quot;pln&quot;&gt;sudo&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;nginx start&lt;/span&gt;，若显示running则表示安装成功 配置Nginx 打开配置文件 12cd /etc/nginx/conf.d/sudo vim blog.conf 添加如下配置，并根据监听端口，开启服务器防火墙 123456789server{ listen 8081; server_name _; root /var/www/blog; index index.html; location / { }} 配置博客根目录 1mkdir /var/www/blog 确保&lt;span class=&quot;pln&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;git&lt;/span&gt;、&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ssh&lt;/span&gt;、&lt;span class=&quot;pln&quot;&gt;blog&lt;/span&gt;目录的用户组权限均为&lt;span class=&quot;pln&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;git&lt;/span&gt;，如下图所示 如果不是，则执行如下命令，修改权限 12sudo chown git:git -R /var/www/blogsudo chown git:git -R /home/git/blog.git 配置Git Hooks 创建&lt;span class=&quot;pln&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;receive&lt;/span&gt;文件 123456su git//切换用户cd /home/git/blog.git/hooks//进入hooks目录vim post-receive//创建文件 添加如下内容 12345678#!/bin/bashGIT_REPO=/home/git/blog.gitTMP_GIT_CLONE=/tmp/blogPUBLIC_WWW=/var/www/blogrm -rf ${TMP_GIT_CLONE}git clone $GIT_REPO $TMP_GIT_CLONErm -rf ${PUBLIC_WWW}/*cp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} 保存后，执行：&lt;span class=&quot;pln&quot;&gt;chmod&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x post&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;receive&lt;/span&gt; 添加权限 配置Hexo编辑本地博客根目录下的&lt;span class=&quot;pln&quot;&gt;_config&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yml&lt;/span&gt;文件，在原来备份到GitHub的地址下添加一行&lt;span class=&quot;typ&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span&gt; &lt;/span&gt;git@YourIP&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;gt&lt;/span&gt;，再运行&lt;span class=&quot;pln&quot;&gt;hexo deploy&lt;/span&gt;就可以将博客部署到服务器上了","link":"/2024/09/21/%E6%90%AD%E5%BB%BAHexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"title":"现代JavaScript中的异步编程技巧与模式","text":"随着JavaScript在Web开发中的广泛应用，异步编程已经成为开发者日常工作中的重要组成部分。异步操作在处理I/O操作、API请求、定时任务时尤为关键。本文将带你深入探讨现代JavaScript中的异步编程技巧与常见模式，如Promise、async/await以及如何避免常见的异步陷阱。 什么是异步编程？在JavaScript中，异步编程允许程序在执行耗时操作时不中断其他任务，从而提升性能与用户体验。例如，发起一个网络请求时，JavaScript可以继续处理其他任务，而不是等待服务器的响应。这与同步编程形成了鲜明对比，后者需要在每个操作完成后再执行下一步操作。 回调函数（Callback）回调函数是早期处理异步操作的主要手段。在异步任务完成后，通过调用一个预先定义的函数来处理结果。然而，回调容易导致嵌套过深、难以维护的“回调地狱”（Callback Hell）。 12345678910111213// 回调地狱的例子function getData(callback) { setTimeout(() =&gt; { callback('数据已获取'); }, 1000);}getData((data) =&gt; { console.log(data); // 数据已获取 getData((moreData) =&gt; { console.log(moreData); // 数据已获取 });}); Promise为了解决回调地狱的问题，Promise作为一种新的异步处理机制被引入。它是一种对未来事件的承诺，表示一个异步操作的最终完成或失败，并为成功或失败分别提供回调函数。 1234567891011121314151617181920// 创建并使用Promisefunction getData() { return new Promise((resolve, reject) =&gt; { setTimeout(() =&gt; { resolve('数据已获取'); }, 1000); });}getData() .then((data) =&gt; { console.log(data); // 数据已获取 return getData(); }) .then((moreData) =&gt; { console.log(moreData); // 数据已获取 }) .catch((error) =&gt; { console.error('发生错误:', error); }); Promise中的常用方法 Promise.all()Promise.all()允许我们并行执行多个异步操作，并在所有操作都完成时处理结果。如果其中任何一个Promise失败，整个Promise链将失败。 12345678910const promise1 = getData();const promise2 = getData();Promise.all([promise1, promise2]) .then((results) =&gt; { console.log(results); // ['数据已获取', '数据已获取'] }) .catch((error) =&gt; { console.error('一个Promise失败:', error); }); Promise.race()Promise.race()只会返回第一个完成的Promise，无论成功还是失败。这对于需要超时处理的情况非常有用。 1234567const slowPromise = new Promise((resolve) =&gt; setTimeout(resolve, 2000, '慢的'));const fastPromise = new Promise((resolve) =&gt; setTimeout(resolve, 500, '快的'));Promise.race([slowPromise, fastPromise]) .then((winner) =&gt; { console.log('最快完成:', winner); // 快的 }); async/await虽然Promise大大改善了回调地狱的问题，但它的链式结构仍然在某些情况下显得不够直观。为了让异步代码更加简洁可读，ES2017引入了async/await语法，它建立在Promise的基础上，能够用类似同步的代码形式来编写异步操作。 async函数一个async函数总是返回一个Promise。在函数内部可以使用await关键字等待一个Promise的结果。 123456async function fetchData() { const data = await getData(); console.log(data); // 数据已获取}fetchData(); 错误处理在async/await中可以通过try...catch块捕获异步操作中的错误，避免繁琐的catch链。 12345678910async function fetchData() { try { const data = await getData(); console.log(data); // 数据已获取 } catch (error) { console.error('发生错误:', error); }}fetchData(); 异步编程的常见模式 串行异步执行串行异步执行是指一个任务接着另一个任务顺序执行。这种情况下每个任务依赖前一个任务的完成。 12345678async function sequential() { const first = await getData(); console.log(first); const second = await getData(); console.log(second);}sequential(); 并行异步执行使用Promise.all()可以同时启动多个异步操作，提高执行效率。 123456async function parallel() { const [first, second] = await Promise.all([getData(), getData()]); console.log(first, second);}parallel(); 竞争异步执行Promise.race()适用于多个异步操作中的竞争场景，例如网络请求超时。 123456async function race() { const winner = await Promise.race([getData(), new Promise((_, reject) =&gt; setTimeout(reject, 500, '请求超时'))]); console.log('结果:', winner);}race(); 避免异步陷阱 不要忽略未处理的Promise在编写异步代码时，确保所有Promise都被处理，以免发生未捕获的错误。使用await时，也要确保对潜在的异常进行处理。 避免过度并行化并行化虽然可以提升效率，但并发过多可能导致性能问题或资源争用，尤其是在浏览器中进行大量的API请求时，要合理控制并发量。 12345678async function limitedParallel() { const promises = [getData(), getData(), getData()]; for (const promise of promises) { console.log(await promise); // 串行处理，避免一次性发起过多请求 }}limitedParallel(); 结论现代JavaScript的异步编程为开发者提供了强大的工具来处理复杂的异步逻辑。通过Promise和async/await，我们能够编写更加可读和可维护的代码。合理选择和使用异步模式，能够帮助你更高效地处理网络请求、I/O操作以及定时任务。希望本文对你理解和掌握JavaScript中的异步编程有所帮助。 这篇文章结合了现代JavaScript中的异步编程技术，涵盖了回调函数、Promise、async/await，以及如何避免常见的异步编程陷阱。如果你有其他技术主题或更深入的异步场景想探讨，欢迎告诉我！","link":"/2024/09/21/%E7%8E%B0%E4%BB%A3JavaScript%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%A8%A1%E5%BC%8F/"},{"title":"编程语言有和区别？","text":"Python 特征: Python是一种高层次、解释型语言，以其简洁性和可读性而受到广泛赞誉。它支持多种编程范式，包括面向对象、命令式、函数式和过程式编程。 主流开发环境: PyCharm、Visual Studio Code、Jupyter Notebook、Sublime Text、Atom 主要领域: Web 开发、人工智能、数据科学、自动化操作、教育和科学计算。 1print(&quot;Hello, World!&quot;) Java 特征: Java是一种高级、面向对象、稳固且多线程的编程语言，以其“编写一次，处处运行”（WORA）的理念著称。 主流开发环境: IntelliJ IDEA、Eclipse、NetBeans、JDeveloper、Android Studio（Android 开发） 主要领域: 企业级应用、安卓应用开发、Web服务、中大型系统开发。 12345public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello, World!&quot;); }} JavaScript 特征: JavaScript是一种高级、解释型的编程语言，主要用于网页中，与HTML和CSS一同用来创建动态交互式网站。 主流开发环境: Visual Studio Code、Sublime Text、Atom、Brackets、WebStorm 主要领域: 前端开发、后端开发(Node.js)、移动应用开发(React Native, Ionic)、游戏开发。 1console.log('Hello, World!'); C 特征: C#是一个由微软开发的面向对象的、类型安全的编程语言，非常适合Windows平台的开发。 主流开发环境: Visual Studio、Rider、Visual Studio Code、MonoDevelop 主要领域: 桌面软件、游戏开发（Unity引擎）、Web开发（ASP.NET）、Windows应用开发。 123456789using System;class Program{ static void Main(string[] args) { Console.WriteLine(&quot;Hello, World!&quot;); }} C++ 特征: C++是一种中层编程语言，它是C语言的超集，支持面向对象的编程特性，并加入了对泛型编程的支持。 主流开发环境: Visual Studio、Code::Blocks、CLion、Eclipse CDT 主要领域: 系统/应用软件开发、游戏开发、实时物理模拟、高性能计算。 123456#include&lt;iostream&gt;int main() { std::cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; std::endl; return 0;} 当然，这里有一些其他主流编程语言的简要描述、开发环境、主要应用领域和”Hello, World!”示例： PHP 特征: PHP是一种开源的服务器端脚本语言，特别适用于Web开发，并可嵌入到HTML中使用。 主流开发环境: PhpStorm、Zend Studio、Aptana Studio、NetBeans、Visual Studio Code 主要领域: Web开发、内容管理系统（如WordPress、Drupal）、服务器端脚本。 123&lt;?phpecho &quot;Hello, World!&quot;;?&gt; R 特征: R是一种用于统计计算与图形的编程语言和环境，非常适合数据挖掘和统计分析。 主流开发环境: RStudio、Jupyter Notebook、Eclipse (使用 StatET plug-in)、Visual Studio Code 主要领域: 统计分析、生物信息学、数据挖掘、机器学习。 1print(&quot;Hello, World!&quot;) Go (也被称为 Golang) 特征: Go是由Google开发的一种静态类型、编译型语言，具有垃圾回收功能，旨在提高编程效率。 主流开发环境: GoLand、Visual Studio Code、LiteIDE、Atom 主要领域: 云计算（Docker、Kubernetes）、网络服务、并发处理、命令行工具。 123456package mainimport &quot;fmt&quot;func main() { fmt.Println(&quot;Hello, World!&quot;)} Ruby 特征: Ruby是一种动态类型、解释型的编程语言，着重于简洁性和生产力，具有优雅的语法。 主流开发环境: RubyMine、Visual Studio Code、Sublime Text、Atom 主要领域: Web开发（Ruby on Rails）、自动化、原型开发。: 1puts 'Hello, World!' Swift 特征: Swift是由苹果公司开发的一种编译型、多范式编程语言，用来开发iOS、macOS、watchOS和tvOS应用程序。 主流开发环境: Xcode、AppCode、Visual Studio Code 主要领域: iOS和macOS应用开发。 1print(&quot;Hello, World!&quot;)","link":"/2024/09/20/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%9C%89%E5%92%8C%E5%8C%BA%E5%88%AB%EF%BC%9F/"}],"tags":[{"name":"Ai","slug":"Ai","link":"/tags/Ai/"},{"name":"bing","slug":"bing","link":"/tags/bing/"},{"name":"Web","slug":"Web","link":"/tags/Web/"},{"name":"设计","slug":"设计","link":"/tags/%E8%AE%BE%E8%AE%A1/"},{"name":"CND","slug":"CND","link":"/tags/CND/"},{"name":"加速","slug":"加速","link":"/tags/%E5%8A%A0%E9%80%9F/"},{"name":"WordPress","slug":"WordPress","link":"/tags/WordPress/"},{"name":"宝塔","slug":"宝塔","link":"/tags/%E5%AE%9D%E5%A1%94/"},{"name":"反向代理","slug":"反向代理","link":"/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"},{"name":"宝塔面板","slug":"宝塔面板","link":"/tags/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"变量","slug":"变量","link":"/tags/%E5%8F%98%E9%87%8F/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"umami","slug":"umami","link":"/tags/umami/"},{"name":"统计","slug":"统计","link":"/tags/%E7%BB%9F%E8%AE%A1/"},{"name":"部署","slug":"部署","link":"/tags/%E9%83%A8%E7%BD%B2/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"网络","slug":"网络","link":"/tags/%E7%BD%91%E7%BB%9C/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"函数","slug":"函数","link":"/tags/%E5%87%BD%E6%95%B0/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Java","slug":"Java","link":"/tags/Java/"}],"categories":[{"name":"技术分享","slug":"技术分享","link":"/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"},{"name":"部署","slug":"部署","link":"/categories/%E9%83%A8%E7%BD%B2/"}],"pages":[{"title":"cookies","text":"本站非常重视用户的隐私和个人信息保护。你在使用网站时，可能会收集和使用你的相关信息。通过《隐私政策》向你说明在你访问 yuazhi.cn 网站时，如何收集、使用、保存、共享和转让这些信息。 最新更新时间：2024-06-13 一、在访问时如何收集和使用你的个人信息在访问时，收集访问信息的服务会收集不限于以下信息： 网络身份标识信息（浏览器 UA、IP 地址） 设备信息 浏览过程操作方式、浏览方式与时长、性能与网络加载情况 在访问时，本站内置的第三方服务会通过以下或更多途径，来获取你的以下或更多信息： 百度统计工具：会收集你的访问信息、访问操作过程 51la 统计工具：会收集你的访问信息 灵雀应用监控平台：会收集你的访问操作过程和资源加载情况 今日头条搜索：会收集你的访问信息 字节跳动静态资源库：会收集你的访问信息 Tianlicdn：会收集你的访问信息 busuanzi 统计：会收集你的访问信息 腾讯云：会收集你的访问信息 腾讯 Codesign：会收集你的访问信息 阿里 cdn（iconfont）：会收集你的访问信息 QQ 音乐：会收集你的访问信息 网易云音乐：会收集你的访问信息 在访问时，本人仅会处于以下目的，使用你的个人信息： 用于网站的优化与文章分类，用户优化文章 恶意访问识别，用于维护网站 恶意攻击排查，用于维护网站 网站点击情况监测，用于优化网站页面 网站加载情况监测，用于优化网站性能 用于网站搜索结果优化 浏览数据的展示 第三方信息获取方将您的数据用于以下用途： 第三方可能会用于其他目的，详情请访问对应第三方服务提供的隐私协议。 你应该知道在你访问的时候不限于以下信息会被第三方获取并使用： 第三方部分为了抵抗攻击、使用不同节点 cdn 加速等需求会收集不限于以下信息 类型 信息 网络信息 IP 地址 国家 省份 城市 运营商 设备信息 设备 此页面如果未能获取到信息并不代表无法读取上述信息，以实际情况为准。 二、在评论时如何收集和使用你的个人信息评论使用的是无登陆系统的匿名评论系统，你可以自愿填写真实的、或者虚假的信息作为你评论的展示信息。鼓励你使用不易被人恶意识别的昵称进行评论，但是建议你填写真实的邮箱以便收到回复（邮箱信息不会被公开）。在你评论时，会额外收集你的个人信息。 在评论时，本站内置的第三方服务会通过以下或更多途径，来获取你的相关信息： cravatar：会收集你的访问信息、评论填写的个人信息用于展示头像 在访问时，本人仅会处于以下目的，收集并使用以下信息： 评论时会记录你的 QQ 帐号（如果在邮箱位置填写 QQ 邮箱或 QQ 号），方便获取你的 QQ 头像。如果使用 QQ 邮箱但不想展示 QQ 头像，可以填写不含 QQ 号的 QQ 邮箱。（主动，存储） 评论时会记录你的邮箱，当我回复后会通过邮件通知你（主动，存储，不会公开邮箱） 评论时会记录你的网址，用于点击头像时快速进入你的网站（主动，存储） 评论时会记录你的 IP 地址，作为反垃圾的用户判别依据（被动，存储，不会公开 IP，会公开 IP 所在城市） 评论会记录你的浏览器代理，用作展示系统版本、浏览器版本方便展示你使用的设备，快速定位问题（被动，存储） 三、如何使用-Cookies-和本地-LocalStorage-存储本站为实现无账号评论、深色模式切换，不蒜子的 uv 统计等功能，会在你的浏览器中进行本地存储，你可以随时清除浏览器中保存的所有 Cookies 以及 LocalStorage，不影响你的正常使用。本博客中的以下业务会在你的计算机上主动存储数据： 内置服务 评论系统 即刻短文 鱼塘 中控台 胶囊音乐 第三方服务 百度统计 51a 统计 busuanzi 统计 关于如何使用你的 Cookies，请访问 Cookies 政策。关于如何在 Chrome 中清除、启用和管理 Cookie，请参阅相关文档。 四、如何共享、转让你的个人信息本人不会与任何公司、组织和个人共享你的隐私信息，本人不会将你的个人信息转让给任何公司、组织和个人。第三方服务的共享、转让情况详见对应服务的隐私协议。 五、附属协议当监测到存在恶意访问、恶意请求、恶意攻击、恶意评论的行为时，为了防止增大受害范围，可能会临时将你的 IP 地址及访问信息短期内添加到黑名单，短期内禁止访问。此黑名单可能被公开，并共享给其他站点（主体并非本人）使用，包括但不限于：IP 地址、设备信息、地理位置。 本隐私政策自 2023 年 1 月 1 日起生效。 本隐私政策最后更新时间为 2023 年 1 月 1 日。","link":"/cookies.html"},{"title":"about","text":"","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"友链","text":"loadQexoFriends(\"qexo-friends\", \"https://qexo.yuazhi.cn\") 申请友链 名称 链接 请确保站点可访问！ 图标 描述 我提交的不是无意义信息 申请友链 function TestUrl(url) { var Expression=/http(s)?:\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- .\\/?%&=]*)?/; var objExp=new RegExp(Expression); if(objExp.test(url) != true){ return false; } return true; } function askFriend(event) { let check = $(\"#friend-check\").is(\":checked\"); let name = $(\"#friend-name\").val(); let url = $(\"#friend-link\").val(); let image = $(\"#friend-icon\").val(); let des = $(\"#friend-des\").val(); if (!check) { alert(\"请勾选\\\"我提交的不是无意义信息\\\"\"); return; } if (!(name && url && image && des)) { alert(\"信息填写不完整! \"); return; } if (!(TestUrl(url))) { alert(\"URL格式错误! 需要包含HTTP协议头! \"); return; } if (!(TestUrl(image))) { alert(\"图片URL格式错误! 需要包含HTTP协议头! \"); return; } event.target.classList.add('is-loading'); $.ajax({ type: 'POST', dataType: 'json', data: JSON.stringify({ \"name\": name, \"url\": url, \"image\": image, \"description\": des, \"verify\": token, }), contentType: 'application/json', url: 'https://qexo.yuazhi.cn/pub/ask_friend/', success: function (response) { alert(response.msg); }, error: function (jqXHR, textStatus, errorThrown) { console.error('Error during POST request:', textStatus, errorThrown); alert('提交失败，请稍后再试。'); } }); event.target.classList.remove('is-loading'); }","link":"/friends/index.html"},{"title":"messages","text":"","link":"/messages/index.html"},{"title":"动态","text":"showQexoTalks(\"qexot\", \"https://qexo.yuazhi.cn\", 5)","link":"/talks/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}]}